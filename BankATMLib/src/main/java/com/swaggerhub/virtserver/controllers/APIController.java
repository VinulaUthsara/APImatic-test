/*
 * BankATMLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.swaggerhub.virtserver.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import com.swaggerhub.virtserver.*;
import com.swaggerhub.virtserver.models.*;
import com.swaggerhub.virtserver.exceptions.*;
import com.swaggerhub.virtserver.http.client.HttpClient;
import com.swaggerhub.virtserver.http.client.HttpContext;
import com.swaggerhub.virtserver.http.request.HttpRequest;
import com.swaggerhub.virtserver.http.response.HttpResponse;
import com.swaggerhub.virtserver.http.response.HttpStringResponse;
import com.swaggerhub.virtserver.http.client.APICallBack;

public class APIController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static APIController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the APIController class 
     */
    public static APIController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new APIController();
                }
            }
        }
        return instance;
    }

    /**
     * Returns customer account information
     * @param    pin    Required parameter: The pin of customers account
     * @return    Returns the void response from the API call 
     */
    public void getReturnsCustomerAccountInformationAsync(
                final int pin,
                final APICallBack<InlineResponse200> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetReturnsCustomerAccountInformationRequest(pin);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            InlineResponse200 returnValue = _handleGetReturnsCustomerAccountInformationResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getReturnsCustomerAccountInformation
     */
    private HttpRequest _buildGetReturnsCustomerAccountInformationRequest(
                final int pin) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/accountinfo/{pin}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("pin", pin);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getReturnsCustomerAccountInformation
     * @return An object of type void
     */
    private InlineResponse200 _handleGetReturnsCustomerAccountInformationResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("The specified pin is invalid (e.g. not a number).", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("An account with the specified pin was not found.", _context);
        }
        if ((_responseCode < 200) || (_responseCode > 208)) {
            throw new APIException("Unexpected error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        InlineResponse200 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<InlineResponse200>(){});

        return _result;
    }

    /**
     * Returns customer account information
     * @param    pin    Required parameter: The pin of customers account
     * @return    Returns the void response from the API call 
     */
    public void createReturnsCustomerAccountInformationAsync(
                final int pin,
                final APICallBack<InlineResponse2001> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateReturnsCustomerAccountInformationRequest(pin);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            InlineResponse2001 returnValue = _handleCreateReturnsCustomerAccountInformationResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createReturnsCustomerAccountInformation
     */
    private HttpRequest _buildCreateReturnsCustomerAccountInformationRequest(
                final int pin) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/withdrawal/{pin}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("pin", pin);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createReturnsCustomerAccountInformation
     * @return An object of type void
     */
    private InlineResponse2001 _handleCreateReturnsCustomerAccountInformationResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("The specified pin is invalid (e.g. not a number).", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("An account with the specified pin was not found.", _context);
        }
        if ((_responseCode < 200) || (_responseCode > 208)) {
            throw new APIException("Unexpected error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        InlineResponse2001 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<InlineResponse2001>(){});

        return _result;
    }

    /**
     * Returns customer account information
     * @param    pin    Required parameter: The pin of customers account
     * @return    Returns the void response from the API call 
     */
    public void updateReturnsCustomerAccountInformationAsync(
                final int pin,
                final APICallBack<InlineResponse2002> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateReturnsCustomerAccountInformationRequest(pin);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            InlineResponse2002 returnValue = _handleUpdateReturnsCustomerAccountInformationResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateReturnsCustomerAccountInformation
     */
    private HttpRequest _buildUpdateReturnsCustomerAccountInformationRequest(
                final int pin) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/deposit/{pin}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("pin", pin);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().put(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateReturnsCustomerAccountInformation
     * @return An object of type void
     */
    private InlineResponse2002 _handleUpdateReturnsCustomerAccountInformationResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("The specified pin is invalid (e.g. not a number).", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("An account with the specified pin was not found.", _context);
        }
        if ((_responseCode < 200) || (_responseCode > 208)) {
            throw new APIException("Unexpected error w", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        InlineResponse2002 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<InlineResponse2002>(){});

        return _result;
    }

}
